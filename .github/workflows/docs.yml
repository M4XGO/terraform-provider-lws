name: Generate Documentation

on:
  push:
    branches: [main]
    paths:
      - 'internal/**'
      - 'docs/**'
      - 'examples/**'
      - 'templates/**'
      - '.goreleaser.yml'
  pull_request:
    branches: [main]
    paths:
      - 'internal/**' 
      - 'docs/**'
      - 'examples/**'
      - 'templates/**'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true

      - name: Install terraform-plugin-docs
        run: |
          go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@latest

      - name: Generate documentation
        run: |
          echo "🔧 Generating Terraform provider documentation..."
          tfplugindocs generate
          
          echo "📝 Documentation generated in docs/ directory"
          ls -la docs/

      - name: Check for documentation changes
        id: verify-changed-files
        run: |
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "✅ No documentation changes needed"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "📝 Documentation changes detected"
            git diff --name-only
          fi

      - name: Commit documentation changes
        if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git commit -m "docs: update provider documentation [skip ci]

          Auto-generated by terraform-plugin-docs"
          git push

      - name: Comment PR with documentation changes  
        if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('📚 Documentation changes detected')
            );
            
            const body = `📚 **Documentation changes detected**
            
            This PR will update the provider documentation when merged.
            
            The following files will be updated:
            \`\`\`
            ${await exec.getExecOutput('git', ['diff', '--name-only'])}
            \`\`\`
            
            <details>
            <summary>Preview changes</summary>
            
            \`\`\`diff
            ${await exec.getExecOutput('git', ['diff', 'docs/'])}
            \`\`\`
            </details>`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  validate-examples:
    runs-on: ubuntu-latest
    needs: docs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Validate example configurations
        run: |
          echo "🔍 Validating example Terraform configurations..."
          
          for example_dir in examples/*/; do
            if [ -d "$example_dir" ]; then
              echo "Validating $example_dir"
              cd "$example_dir"
              
              # Initialize and validate
              terraform init -backend=false
              terraform validate
              
              cd - > /dev/null
              echo "✅ $example_dir is valid"
            fi
          done
          
          echo "✅ All examples validated successfully"

  generate-readme-docs:
    runs-on: ubuntu-latest
    needs: docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with usage examples
        run: |
          echo "📚 Updating README with latest usage examples..."
          
          # Create usage section in README
          cat > usage_section.md << 'EOF'
          ## Usage

          Here's a quick example of how to use this provider:

          ```hcl
          terraform {
            required_providers {
              lws = {
                source  = "M4XGO/lws"
                version = "~> 2.0"
              }
            }
          }

          provider "lws" {
            # Configuration options
          }

          # Example DNS zone data source
          data "lws_dns_zone" "example" {
            zone = "example.com"
          }

          # Example DNS record resource
          resource "lws_dns_record" "example" {
            zone = data.lws_dns_zone.example.zone
            name = "www"
            type = "A"
            content = "192.168.1.1"
            ttl = 3600
          }
          ```

          For more examples, see the [examples/](examples/) directory.

          ## Documentation

          Full documentation is available in the [docs/](docs/) directory:

          - [Provider Configuration](docs/index.md)
          - [Data Sources](docs/data-sources/)
          - [Resources](docs/resources/)

          EOF

          # Check if README needs updating
          if ! grep -q "## Usage" README.md; then
            echo "Adding usage section to README..."
            # Insert after the main title
            sed -i '2r usage_section.md' README.md
            
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "docs: add usage examples to README [skip ci]" || echo "No changes to commit"
            git push || echo "No changes to push"
          fi
          
          rm -f usage_section.md

      - name: Summary
        run: |
          echo "## 📚 Documentation Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Provider Documentation:** Generated with terraform-plugin-docs" >> $GITHUB_STEP_SUMMARY
          echo "**Examples:** Validated successfully" >> $GITHUB_STEP_SUMMARY
          echo "**README:** Updated with usage examples" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Generated Files:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find docs/ -name "*.md" | head -10 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY 