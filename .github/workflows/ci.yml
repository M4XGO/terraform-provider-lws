name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: read

env:
  GO_VERSION: '1.22'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.go-version == '1.22'
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install and Run Gosec
      run: |
        # Download and install gosec binary directly
        curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
        export PATH=$PATH:$(go env GOPATH)/bin
        gosec ./...

  validate-goreleaser:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check GoReleaser config
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: v1.26.2
        args: check

    - name: Test GoReleaser build (snapshot)
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: v1.26.2
        args: build --snapshot --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform-validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        terraform-version: ['1.5.0', '1.6.0', '1.7.0']
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Terraform ${{ matrix.terraform-version }}
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.terraform-version }}

    - name: Create test configuration
      run: |
        mkdir -p test-validation
        cat > test-validation/main.tf << 'EOF'
        terraform {
          required_version = ">= 1.5.0"
        }

        # Simple configuration to test Terraform syntax validation
        locals {
          example = "test"
        }

        output "test" {
          value = local.example
        }
        EOF

    - name: Terraform fmt check
      run: |
        cd test-validation
        terraform fmt -check

    - name: Terraform validate
      run: |
        cd test-validation
        terraform init
        terraform validate

  acceptance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run acceptance tests
      run: make testacc
      env:
        TF_ACC: '1'
        LWS_LOGIN: ${{ secrets.LWS_TEST_LOGIN }}
        LWS_API_KEY: ${{ secrets.LWS_TEST_API_KEY }}
        LWS_TEST_MODE: 'true'
      continue-on-error: true

  build-matrix:
    runs-on: ubuntu-latest
    needs: [test, lint, validate-goreleaser]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build provider
      run: |
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
          -ldflags="-s -w" \
          -o terraform-provider-lws_${{ matrix.goos }}_${{ matrix.goarch }} \
          .
      env:
        CGO_ENABLED: 0

    - name: Test provider binary
      if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
      run: |
        ./terraform-provider-lws_linux_amd64 --help || true
        ./terraform-provider-lws_linux_amd64 --version || true 